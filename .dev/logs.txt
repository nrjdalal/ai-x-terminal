{
  "language": "typescript",
  "langpath": "",
  "content": "src/services/openai.ts\nimport { OpenAI } from 'openai';\nimport chalk from '../utils/chalk.js';\nimport ora, { Ora } from 'ora';\nimport { manipulateCode } from '../utils/colorManipulation.js';\n\nexport async function streamCompletion(\n  openai: OpenAI,\n  prompt: string,\n  config: any,\n  opts: any\n): Promise<string> {\n  let spinner: Ora | null = null;\n  let finalContent = '';\n\n  try {\n    const stream = await openai.chat.completions.create({\n      model: 'gpt-4o-2024-08-06',\n      messages: [\n        { role: 'system', content: config.persona },\n        { role: 'user', content: prompt },\n      ],\n      stream: true,\n    });\n\n    let buffer = '\\n';\n    let insideCodeBlock = false;\n\n    for await (const part of stream) {\n      if (part.choices && part.choices[0]?.delta?.content) {\n        const chunk = part.choices[0].delta.content;\n        finalContent += chunk; // Collect the content\n\n        buffer += chunk;\n\n        while (buffer.includes(`\\`\\`\\``)) {\n          const [before, after] = buffer.split(`\\`\\`\\``, 2);\n\n          if (insideCodeBlock) {\n            if (spinner) {\n              spinner.stop();\n              spinner = null;\n            }\n            // process.stdout.write(chalk.blue(`\\`\\`\\`${before}\\`\\`\\``));\n            // ~ logic to color and replace code block\n            process.stdout.write(manipulateCode(`\\`\\`\\`${before}\\`\\`\\``, opts));\n            insideCodeBlock = false;\n          } else {\n            process.stdout.write(chalk.yellow(before));\n            insideCodeBlock = true;\n\n            if (!spinner) {\n              spinner = ora({\n                text: 'Writing code...',\n                spinner: 'dots',\n              }).start();\n            }\n          }\n\n          buffer = after;\n        }\n\n        if (!insideCodeBlock) {\n          if (spinner) {\n            spinner.stop();\n            spinner = null;\n          }\n          process.stdout.write(buffer);\n          buffer = '';\n        }\n      }\n    }\n\n    if (buffer) {\n      if (insideCodeBlock) {\n        if (spinner) {\n          spinner.stop();\n          spinner = null;\n        }\n        process.stdout.write(chalk.blue(buffer));\n      } else {\n        process.stdout.write(buffer);\n      }\n    }\n  } catch (error) {\n    console.error(\n      chalk.red('An error occurred while streaming completion:'),\n      error instanceof Error ? error.message : String(error)\n    );\n    return '';\n  } finally {\n    if (spinner) {\n      spinner.stop();\n    }\n  }\n  return finalContent;\n}\n"
}
